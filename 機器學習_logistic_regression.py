# -*- coding: utf-8 -*-
"""機器學習-Logistic Regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13u276oIgeF3pUv71H6HC4qdz5cgMUUdO
"""

import pandas as pd

data = pd.read_csv("https://raw.githubusercontent.com/Dr-XYZ/pandas_csv/main/Diabetes_Data.csv")
data

#資料處理
data["Gender"] = data["Gender"].map({"男生": 1,"女生": 0})
data

#訓練集測試集

from sklearn.model_selection import train_test_split #拆分模組

x = data[["Age",	"Weight",	"BloodSugar"	,"Gender"]]
y = data["Diabetes"]

x_train , x_test , y_train , y_test = train_test_split( x, y, test_size=0.2 , random_state=87)

# 轉換成numpy計算較快
x_train = x_train.to_numpy()
x_test = x_test.to_numpy()

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaler.fit(x_train)
x_train = scaler.transform(x_train)
x_test = scaler.transform(x_test)

import numpy as np

def Sigmoid_Function(z):
  return 1/(1+np.exp(-z))

w = np.array([3,2,3,4])
b=1

z = ((x_train * w).sum(axis=1) + b)

z_sigmoid = Sigmoid_Function(z)

def compute_cost(x,z,w,b):
  z = ((x * w).sum(axis=1) + b)
  y_pred = Sigmoid_Function(z)
  cost = (-(y * np.log(z_sigmoid[1]) + (1 - y) * np.log(1 - z_sigmoid[1]))).mean()
  return cost
compute_cost(x_train, y_train, w, b)